#!/bin/bash
# Created by KD9EJQ
#
# Updates
# 2023-10-24 Created pre-flight-check to evaluate software requirements
#


##############################
# FUNCTIONS
##############################
pre-flight-check () {
	clear
	if ! hash ${1} 2>/dev/null; then
		echo "WARNING"
		echo ""
		echo "${1} is missing!"
		echo " +--------------------------------------"
		echo " |  sudo apt update"
		echo " |  sudo apt install -y ${1}"
		echo " +--------------------------------------"
		read -p "Would you like to install now (y/n)? "
		case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
			y|yes) sudo apt update; sudo apt install -y ${appName} ;;
			*)     echo "OK, we shall skip it, but things may break :-(" ;;
		esac
	fi
}

pat-only () {
	# Just run Pat by itself
	# Using the Internet (telnet)
	pat http
}

pat-direwolf () {
	# Start Direwolf in a new terminal, but continue on with script
	sudo xterm -e 'figlet Direwolf;direwolf -p' &
	# Check to see if the Direwolf symbolic link is active before continuing on...
	while [ ! -L /tmp/kisstnc ]; do sleep .5; done
	# Connect KISS
	sudo kissattach /tmp/kisstnc wl2k
	sudo kissparms -c 1 -p wl2k
	# Start Pat with web interface
	pat http
	# Clean up after being done
	sudo rm /tmp/kisstnc
	sudo killall kissattach
}

pat-mobilinkd () {
	# Connect via bluetooth to Mobilinkd
	sudo xterm -e 'figlet Mobilinkd;rfcomm connect /dev/rfcomm0 34:81:F4:70:71:15 6' &
	# Check to verify the Bluetooth connection is made before conitnuing on...
	while [ ! -e /dev/rfcomm0 ]; do sleep .5; done
	# Connect KISS
	sudo kissattach /dev/rfcomm0 wl2k
	# Start Pat with web interface
	pat http
	# Clean up after being done
	sudo rfcomm release /dev/rfcomm0
	sudo killall rfcomm
	sudo killall kissattach
}

kill-kiss () {
	sudo killall kissattach
}



######################################################################
# MAIN
######################################################################

# Check to verify all depend software is installed
pre-flight-check whiptail
pre-flight-check tmux
pre-flight-check figlet 

# Check to make sure whiptail is installed and available, if not install it.
if hash whiptail 2>/dev/null; then
	# It's installed, there is nothing to do... continue on.
	echo ""
else
	# Not installed, or we can't find it, so let's prompt to install it
	echo "Bummer, whiptail is required for the menu of install options."
	read -p "Would you like to install whiptail now (y/n)? "
	case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
		y|yes) sudo apt update; sudo apt install -y whiptail ;;
		*)     echo "OK, we shall skip it, but things will not work :-(" ;;
	esac
fi

# Check how big the current screen/terminal is
# LINES=`tput lines`
# COLUMNS=`tput cols`
HEIGHT=`stty size | cut -d" " -f1`
WIDTH=`stty size | cut -d" " -f2`

declare -a SELECTION

# OK, this is a little tricky...
#   but I've added a left and right () before and after so the variable is
#   interperated as an array.
#
#   example of a possible value
#             $SELECTION=(create-alias update-upgrade options ssh-config)
SELECTION=( $(whiptail \
--title "Ham Radio Tools" \
--notags \
--menu "Ham Radio - Some of the most common ham radio command line tools." \
${HEIGHT} ${WIDTH} $((HEIGHT-8)) \
	"pat-only"		"Pat with Internet (telnet)" \
	"pat-direwolf"		"Pat with Direwolf" \
	"pat-mobilinkd"		"Pat with Mobilinkd (Bluetooth)" \
	"kill-kiss"		"Kill all kiss* processes IDs" \
	3>&1 1>&2 2>&3) )

# Now loop through all the returned selections, which is stored in an array $SELECTION
for i in "${SELECTION[@]}"
do
	$i
done

echo Now exiting from: ${i}
